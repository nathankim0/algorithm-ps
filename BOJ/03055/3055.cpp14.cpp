#include <iostream>#include <queue>#include <algorithm>#include <vector>using namespace std;int r, c; //r행(줄) c열char arr[51][51];int dx[] = { 1,0,-1,0 };int dy[] = { 0,1,0,-1 };queue<pair<int, int>> q;int time[51][51];int x = 0, y = 0;int rx, ry;int gosmBfs(void) {	pair<int, int> p;	while (!q.empty()) {		p = q.front();		q.pop();		if (arr[p.first][p.second] == '*') {			for (int i = 0; i < 4; i++) {				int ny = p.first + dy[i];				int nx = p.second + dx[i];				if (0 <= ny&&ny < r && 0 <= nx&&nx < c&&arr[ny][nx] == '.') {					arr[ny][nx] = '*';					q.push(make_pair(ny, nx));				}			}		}		else if (arr[p.first][p.second] == 'S') {			for (int i = 0; i < 4; i++) {				int ny = p.first + dy[i];				int nx = p.second + dx[i];				if (arr[ny][nx] == 'D') {					//x = p.second;					//y = p.first;					return time[p.first][p.second];				}				if (0 <= ny&&ny < r && 0 <= nx&&nx < c&&arr[ny][nx] == '.') {					arr[ny][nx] = 'S';					time[ny][nx] = time[p.first][p.second] + 1;					q.push(make_pair(ny, nx));				}			}		}	}}int main(void) {	ios::sync_with_stdio(false);	cin.tie(0);//	freopen("input.txt", "r",stdin);	cin >> r >> c;	for (int i = 0; i < r; i++) {		for (int j = 0; j < c; j++) {			cin >> arr[i][j];			if (arr[i][j] == '*') {				q.push(make_pair(i, j));			}			if (arr[i][j] == 'D') {				ry = i;				rx = j;			}		}	}	for (int i = 0; i < r; i++) {		for (int j = 0; j < c; j++) {			if (arr[i][j] == 'S') {				q.push(make_pair(i, j));			}		}	}	int result = gosmBfs();	if (arr[ry + 1][rx] == 'S' || arr[ry][rx + 1] == 'S' || arr[ry - 1][rx] == 'S' || arr[ry][rx - 1] == 'S')		cout << result + 1;	else cout << "KAKTUS";	//cout << endl;	//for (int i = 0; i < r; i++) {	//	for (int j = 0; j < c; j++) {	//		cout << arr[i][j];	//	}	//	cout << endl;	//}	return 0;}