#include <iostream>#include <queue>#include <string.h>using namespace std;int w, h;int arr[51][51];int dx[] = { 0,1,0,-1,-1,1 ,-1,1};int dy[] = { 1,0,-1,0,-1,-1,1,1 };bool check[51][51];queue<pair<int, int>> q;void bfs() {	pair<int, int> p;	while (!q.empty()) {		p = q.front();		q.pop();		for (int i = 0; i < 8; i++) {			int nx = p.second + dx[i];			int ny = p.first + dy[i];			if (0 <= nx && nx < w && 0 <= ny && ny < h && arr[ny][nx] == 1&&check[ny][nx]==false) {				check[ny][nx] = true;				//for (int i = 0; i < h; i++) {				//	for (int j = 0; j < w; j++) {				//		cout<<check[i][j];				//	}				//	cout << endl;				//}				//cout << endl;				q.push({ ny, nx });			}		}	}}int main() {	while (1) {		memset(check, false, sizeof(check));		cin >> w >> h;		if (w == 0 && h == 0) {			break;		}		for (int i = 0; i < h; i++) {			for (int j = 0; j < w; j++) {				cin >> arr[i][j];			}		}		int cnt = 0;		for (int i = 0; i < h; i++) {			for (int j = 0; j < w; j++) {				if (arr[i][j] == 1 && check[i][j] == false) {					check[i][j] = true;					q.push({ i,j });					cnt++;					bfs();				}			}		}		cout << cnt<<endl;	}}