#include<iostream>#include <string>#include <vector>#include <cstdio>#include <queue>#include <cstring>using namespace std;int n, m;//세로 n 가로mint arr[8][8];int tmparr[8][8];int dx[4] = { 1,0,-1,0 };int dy[4] = { 0,1,0,-1 };int result = 0;void copyarr(int (*arr1)[8], int (*arr2)[8]){	for (int i = 0; i < n; i++) {		for (int j = 0; j < m; j++) {			arr1[i][j] = arr2[i][j];		}	}}void bfs() {	pair<int, int>p; 	queue<pair<int, int>> q;	int tmptmparr[8][8];	copyarr(tmptmparr,tmparr);	for (int i = 0; i < n; i++) {		for (int j = 0; j < m; j++) {			if (tmptmparr[i][j] == 2) {				q.push(make_pair(i, j));			}		}	}	while (!q.empty()) {		p = q.front();		q.pop();		for (int i = 0; i < 4; i++) {			int nx = p.second + dx[i];			int ny = p.first + dy[i];			if (0 <= nx&&nx < m && 0 <= ny&&ny < n&&tmptmparr[ny][nx] == 0) {				q.push(make_pair(ny, nx));				tmptmparr[ny][nx] = 2;			}		} 	}	int cnt = 0;	for (int i = 0; i < n; i++) {		for (int j = 0; j < m; j++) {			if (tmptmparr[i][j] == 0) {				++cnt;			}		}	}	if (result < cnt)result = cnt;}void wall(int x) {	if (x == 3) {		bfs();		return;	}	for (int i = 0; i < n; i++) {		for (int j = 0; j < m; j++) {			if (tmparr[i][j] == 0) {				tmparr[i][j] = 1;				wall(x + 1);				tmparr[i][j] = 0;			}		}	}}int main(int argc, char** argv){	std::ios::sync_with_stdio(false);	cin.tie(0);	//freopen("input.txt", "r", stdin);	cin >> n >> m;	for (int i = 0; i < n; i++) {		for (int j = 0; j < m; j++) {			cin >> arr[i][j];		}	}	for (int i = 0; i < n; i++) {		for (int j = 0; j < m; j++) {			if (arr[i][j] == 0) {				copyarr(tmparr,arr);				tmparr[i][j] = 1;				wall(1);				tmparr[i][j] = 0;			}		}	}	cout << result;	return 0;}