#include <iostream>#include <vector>#include <algorithm>#include <queue>#include <string.h>using namespace std;int r, c;char arr[1002][1002];queue<pair<int, int>> q;int time[1002][1002];int dx[] = { 1,0,-1,0 };int dy[] = { 0,1,0,-1 };int bfs(void) {	while (!q.empty()) {		pair<int, int> p;		p = q.front();		q.pop();				/*		for (int i = 0; i < r; i++) {			for (int j = 0; j < c; j++) {				cout << arr[i][j];			}			cout << endl;		}		cout << endl;		*/		if (arr[p.first][p.second] == '@') {			if (p.first == 0 || p.second == 0 || p.second + 1 == c || p.first + 1 == r) {				return time[p.first][p.second] + 1;			}			for (int i = 0; i < 4; i++) {				int nx = p.second + dx[i];				int ny = p.first + dy[i];				if (0 <= nx && nx < c && 0 <= ny && ny < r) {					if (arr[ny][nx] == '.') {						arr[ny][nx] = '@';						time[ny][nx] = time[p.first][p.second] + 1;						q.push({ ny,nx });					}				}			}		}		else if (arr[p.first][p.second] == '*') {			for (int i = 0; i < 4; i++) {				int nx = p.second + dx[i];				int ny = p.first + dy[i];				if (0 <= nx && nx < c && 0 <= ny && ny < r) {					if (/*arr[ny][nx] == '@' || */arr[ny][nx] == '.') {						arr[ny][nx] = '*';						q.push({ ny,nx });					}				}			}		}	}	return -1;}int main() {	int testcase;	cin >> testcase;	while (testcase--) {		memset(arr, 0, sizeof(arr));		memset(time, 0, sizeof(time));		if (!q.empty()) {			while (!q.empty())			{				q.pop();			}		}		cin >> c >> r;		for (int i = 0; i < r; i++) {			for (int j = 0; j < c; j++) {				cin >> arr[i][j];				if (arr[i][j] == '*') {					q.push({ i,j });				}			}		}		for (int i = 0; i < r; i++) {			for (int j = 0; j < c; j++) {				if (arr[i][j] == '@') {					q.push({ i,j });				}			}		}		int result = bfs();		if (result == -1) {			cout << "IMPOSSIBLE"<<endl;		}		else {			cout << result<<endl;		}	}}