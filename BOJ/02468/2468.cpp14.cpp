#include <iostream>#include <queue>#include <vector>#include <string.h>using namespace std;int n;int arr[101][101] = { 0, };int dx[] = { 1,0,-1,0 };int dy[] = { 0,1,0,-1 };bool check[101][101];priority_queue<int> q;void dfs(int y,int x,int h) {	for (int i = 0; i < 4; i++) {		int ny = y + dy[i];		int nx = x + dx[i];		if (0 <= nx && nx < n && 0 <= ny && ny < n&&h < arr[ny][nx] && check[ny][nx] == false) {			check[ny][nx] = true;			dfs(ny, nx, h);		}	}}int main() {	cin >> n;	for (int i = 0; i < n; i++) {		for (int j = 0; j < n; j++) {			cin >> arr[i][j];		}	}	for (int height = 1; height <= 100; height++) {		int cnt = 0;		memset(check, false, sizeof(check));		for (int i = 0; i < n; i++) {			for (int j = 0; j < n; j++) {				if(arr[i][j]>height&&check[i][j]==false){					check[i][j] = true;					dfs(i, j, height);					cnt++;				}			}		}		q.push(cnt);	}	if (q.top() == 0) cout << 1;	else cout << q.top();}